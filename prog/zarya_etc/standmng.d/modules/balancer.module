#!/bin/bash

what_todo=$1
param1=$2

temp_file="/tmp-noinst/balancer.temp"
###################################
# require to be installed Server

change_passwd()
	{
	user=$1
	pass=$2

	echo "Setting password for user: \"$user\""
	passwd $user &> /dev/null <<-EOF
		$pass
		$pass
		EOF
	}

###################################

install()
	{
	yum -y -q install postgresql-libs postgresql postgresql-pgpool-II php-pgsql phpPgAdmin
	}

init_set()
	{
	echo -e "\nrun_init service pgpool start" >> /etc/rc.local

	echo "Setting selinux context for users..."
		semanage user -m -r s0-s3 user_u
		semanage user -a -R dbadm_r -r s0-s3:c0.c1023 dbadm_u

	echo "Creating users..."
		adduser user1
		adduser user2
		adduser user3
		adduser -Z dbadm_u sepgsql
		usermod -aG wheel sepgsql

		change_passwd user1 $user1_pass
		change_passwd user2 $user2_pass
		change_passwd user3 $user3_pass
		change_passwd sepgsql $sepgsql_pass
		change_passwd postgres $postgres_pass

	echo "Setting selinux context for users..."
		semanage login -a -s user_u -r s3 user1
		semanage login -a -s user_u -r s2 user2
		semanage login -a -s user_u -r s0 user3
		semanage login -m -r s0-s3 sepgsql
		chcon -R -l 's3' /home/user1
		chcon -R -l 's2' /home/user2
		chcon -R -l 's0' /home/user3
		chcon -R -l 's0' /home/sepgsql

	iptables_mng add 9999

	echo "Setting pgpool.conf..."
		sed -i "s/listen_addresses = 'localhost'/listen_addresses = '*'/" /etc/pgpool-II/pgpool.conf
		sed -i "s/enable_pool_hba = false/enable_pool_hba = true/" /etc/pgpool-II/pgpool.conf

	        server_ips=(`standmng get Server`)
		        if [ "$server_ips" = "" ]
		        then
				echo "Error: Can't find IP address for Server. May me it isn't installed!"
				exit 1
		        fi
		rm -Rf $temp_file &> /dev/null
	        for ((i=0; i<${#server_ips[@]}; i++))
	                do
			echo "backend_hostname$i = '${server_ips[$i]}'" >> $temp_file
			echo "backend_port$i = 5432" >> $temp_file
			echo "backend_weight$i = 1" >> $temp_file
			echo "backend_data_directory$i = '/var/lib/pgsql/data'" >> $temp_file
	                done
		sed -i "/#backend_data_directory1 = '\/data1'/r $temp_file" /etc/pgpool-II/pgpool.conf
		rm -Rf $temp_file &> /dev/null

	echo "Setting pcp.conf..."
		echo "user1:`pg_md5 $user1_pass`" >> /etc/pgpool-II/pcp.conf
		echo "user2:`pg_md5 $user2_pass`" >> /etc/pgpool-II/pcp.conf
		echo "user3:`pg_md5 $user3_pass`" >> /etc/pgpool-II/pcp.conf
		echo "sepgsql:`pg_md5 $sepgsql_pass`" >> /etc/pgpool-II/pcp.conf
		echo "postgres:`pg_md5 $postgres_pass`" >> /etc/pgpool-II/pcp.conf

	echo "Setting pool_hba.conf..."
		for i in 1 2 3; do sed -i '$d' /etc/pgpool-II/pool_hba.conf; done

		echo -e "local   all             all                                        trust" >> /etc/pgpool-II/pool_hba.conf
		echo -e "host    all             all             127.0.0.1/32               trust" >> /etc/pgpool-II/pool_hba.conf
		echo -e "\n" >> /etc/pgpool-II/pool_hba.conf

		ips=(`standmng get allip`)
		for ((i=0; i<${#ips[@]}; i++))
			do
			echo -e "host    all             all             ${ips[$i]}/32           md5" >> /etc/pgpool-II/pool_hba.conf
			done

	echo "Setting passwords for pgpool..."
		touch /etc/pgpool-II/pool_passwd
		chmod a+w /etc/pgpool-II/pool_passwd

		su -l user1 -c "pg_md5 --md5auth $user1_pass"
		su -l user2 -c "pg_md5 --md5auth $user2_pass"
		su -l user3 -c "pg_md5 --md5auth $user3_pass"
		su -l sepgsql -c "pg_md5 --md5auth $sepgsql_pass"
		su -l postgres -c "pg_md5 --md5auth $postgres_pass"

	run_init service pgpool start
	}

set()
	{
	echo -e "host    all             all             $param1/32           md5" >> /etc/pgpool-II/pool_hba.conf
	run_init service pgpool restart
	}

unset()
	{
	sed -i "/$param1/d" /etc/pgpool-II/pool_hba.conf
	run_init service pgpool restart
	}

erase()
	{
	yum -y -q erase postgresql-libs postgresql postgresql-pgpool-II php-pgsql phpPgAdmin

	sed -i "/run_init service pgpool start/d" /etc/rc.local

	iptables_mng del 9999
	}

###################################
case $what_todo in
	install)
		echo "Installing $0..."
		install
		init_set
		echo
		;;
	set)
		echo "Setting $0..."
		if [ "$param1" = "" ]
		then
			echo -e "Error: Input parameter isn't set!\n"
			exit 1
		fi

		set
		echo
		;;
	unset)
		echo "Unsetting $0..."
		if [ "$param1" = "" ]
		then
			echo -e "Error: Input parameter isn't set!\n"
			exit 1
		fi

		unset
		echo
		;;
	erase)
		echo "Erasing $0..."
		erase
		echo
		;;
	*)
		echo -e "Usage: $0 { install | set <ip_addr> | unset <ip_addr> | erase }\n"
		exit 1
		;;
esac

