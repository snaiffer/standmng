#!/bin/bash

what_todo=$1
param1=$2

export conf_file="$zarya_etc/standmng.conf"
export local_conf_file="$zarya_etc/standmng_local.conf"

source $conf_file
source $local_conf_file

###################################

MY_DIR=`dirname $0`
server_ips=(`standmng get Server`)
balancer_ip="`standmng get Balancer`"
if [ "$balancer_ip" = "" ]
then
        echo "Error: Balancer isn't found"
        exit 1
fi


set_server()
	{
	ip=$1

	ssh -T root@$ip "rm -f /var/lib/pgsql/data/recovery.conf"

	ssh -T root@$balancer_ip <<-EOF
		echo "Loading pgpool-recovery..."
			scp /usr/share/pgpool-II/pgpool-recovery.so root@$ip:/usr/lib64/pgsql/
			scp /usr/share/pgpool-II/pgpool-recovery.sql root@$ip:/usr/share/pgsql/
		EOF

	echo "Loading pgpool_recovery and pgpool_remote_start..."
		scp $MY_DIR/data/pgpool_recovery postgres@$ip:/var/lib/pgsql/data/
		scp $MY_DIR/data/pgpool_remote_start postgres@$ip:/var/lib/pgsql/data/
	
	ssh -T root@$ip <<-EOF
                server_ips=(${server_ips[@]})

		chmod 755 /var/lib/pgsql/data/pgpool_recovery
		chmod 755 /var/lib/pgsql/data/pgpool_remote_start

		echo "Setting postgresql.conf"
			sed -i "s/^hot_standby = on/#hot_standby = on/" /var/lib/pgsql/data/postgresql.conf

		echo "Setting pg_hba.conf"
                for ((j=0; j<${#server_ips[@]}; j++))
                        do
                        echo "host    replication     postgres        \${server_ips[\$j]}/32           trust" >> /var/lib/pgsql/data/pg_hba.conf
                        done    

		service postgresql restart
		EOF

	ssh -T postgres@$ip <<-EOF
		psql -f /usr/share/pgsql/pgpool-recovery.sql template1
		EOF
	}



install()
        {
	echo -e "Setting ssh connection..."
        for ((i=0; i<${#server_ips[@]}; i++))
                do
                setssh ${server_ips[$i]} postgres $postgres_pass
                ssh -T postgres@${server_ips[$i]} <<-EOF
                        server_ips=(${server_ips[@]})
                        for ((j=0; j<${#server_ips[@]}; j++))
                                do
                                setssh \${server_ips[\$j]} postgres $postgres_pass
                                done    
                        setssh $balancer_ip postgres $postgres_pass
			EOF
                done

        setssh $balancer_ip postgres $postgres_pass
        ssh -T postgres@$balancer_ip <<-EOF
                server_ips=(${server_ips[@]})
                for ((i=0; i<${#server_ips[@]}; i++))
                        do
                        setssh \${server_ips[\$i]} postgres $postgres_pass
                        for ((j=0; j<${#server_ips[@]}; j++))
                                do
                                tempip="\${server_ips[\$j]}"
                                ssh -T postgres@\${server_ips[\$i]} <<-EOF1
                                        setssh \$tempip postgres $postgres_pass
					EOF1
                                done    
                        done
		EOF

        setssh $balancer_ip root $root_pass
        ssh -T root@$balancer_ip <<-EOF
                server_ips=(${server_ips[@]})
                for ((j=0; j<${#server_ips[@]}; j++))
                        do
                        setssh \${server_ips[\$j]} postgres $postgres_pass
                        done    
		EOF

        for ((i=0; i<${#server_ips[@]}; i++))
                do
		echo -e "Additional settings for Server ${server_ips[$i]}"
		set_server ${server_ips[$i]}
		done

	echo -e "Additional settings for Balancer"
		ssh -T root@$balancer_ip <<-EOF
			echo "Setting pgpool.conf"
				sed -i "s/replication_mode =.*/replication_mode = true/" /etc/pgpool-II/pgpool.conf
				sed -i "s/load_balance_mode =.*/load_balance_mode = true/" /etc/pgpool-II/pgpool.conf
	
				sed -i "s/recovery_user =.*/recovery_user = 'postgres'/" /etc/pgpool-II/pgpool.conf
				sed -i "s/recovery_password =.*/recovery_password = '$postgres_pass'/" /etc/pgpool-II/pgpool.conf
				sed -i "s/recovery_1st_stage_command =.*/recovery_1st_stage_command = 'pgpool_recovery'/" /etc/pgpool-II/pgpool.conf
				sed -i "s/recovery_2nd_stage_command =.*/recovery_2nd_stage_command = 'pgpool_recovery'/" /etc/pgpool-II/pgpool.conf
				sed -i "s/recovery_timeout =.*/recovery_timeout = 90/" /etc/pgpool-II/pgpool.conf
	
				sed -i "s/master_slave_mode =.*/master_slave_mode = false/" /etc/pgpool-II/pgpool.conf
				sed -i "s/master_slave_sub_mode =.*/master_slave_sub_mode = 'stream'/" /etc/pgpool-II/pgpool.conf
				sed -i "s/failover_command =.*/failover_command = ''/" /etc/pgpool-II/pgpool.conf
	
				sed -i "s/health_check_timeout =.*/health_check_timeout = 20/" /etc/pgpool-II/pgpool.conf
				sed -i "s/health_check_period =.*/health_check_period = 15/" /etc/pgpool-II/pgpool.conf
				sed -i "s/health_check_user =.*/health_check_user = 'postgres'/" /etc/pgpool-II/pgpool.conf
				
			pgpool -m fast stop
			EOF
		
	echo -e "Replication..."
	        for ((i=1; i<${#server_ips[@]}; i++))
	                do
			ssh -T root@${server_ips[$i]} "service postgresql stop"
			done
	
		ssh -T postgres@${server_ips[0]} <<-EOF
                	server_ips=(${server_ips[@]})
			psql -c "SELECT pg_start_backup('stream');"
	        	for ((i=1; i<${#server_ips[@]}; i++))
	                	do
				rsync -a /var/lib/pgsql/data/ postgres@\${server_ips[\$i]}:/var/lib/pgsql/data/ --exclude postmaster.pid --exclude postmaster.opts
				done
	 		psql -c "SELECT pg_stop_backup();"
			EOF
	
	        for ((i=1; i<${#server_ips[@]}; i++))
	                do
			ssh -T root@${server_ips[$i]} "service postgresql start"
			done
	
		ssh -T root@$balancer_ip "service pgpool start"
	}

###################################

case $what_todo in
        install)
                echo "Installing $0..."
                install
                echo
                ;;
        set)
                echo "Setting $0..."
#                set
                echo
                ;;
        unset)
                echo "Unsetting $0..."
                echo
                ;;
        erase)
                echo "Erasing $0..."
#                erase
                echo
                ;;
        *)
                echo -e "Usage: $0 { install | set <ip_addr> | unset <ip_addr> | erase }\n"
                exit 1
                ;;
esac






