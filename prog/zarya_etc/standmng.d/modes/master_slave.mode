#!/bin/bash

what_todo=$1
param1=$2

export conf_file="$zarya_etc/standmng.conf"
export local_conf_file="$zarya_etc/standmng_local.conf"

source $conf_file
source $local_conf_file

###################################

MY_DIR=`dirname $0`
server_ips=(`standmng get Server`)
balancer_ip="`standmng get Balancer`"
if [ "$balancer_ip" = "" ]
then
	echo "Error: Balancer isn't found"
	exit 1
fi
slave_ips=${server_ips[@]}
slave_ips=( `echo ${slave_ips[@]//$master_ip/}` )


install() {
	echo -e "Setting ssh connection..."
        for ((i=0; i<${#server_ips[@]}; i++))
                do
                setssh ${server_ips[$i]} postgres $postgres_pass
		ssh -T postgres@${server_ips[$i]} <<-EOF
			server_ips=(${server_ips[@]})
        		for ((j=0; j<${#server_ips[@]}; j++))
		                do
				setssh \${server_ips[\$j]} postgres $postgres_pass
				done
			setssh $balancer_ip postgres $postgres_pass
			EOF
                done

	setssh $balancer_ip postgres $postgres_pass
	ssh -T postgres@$balancer_ip <<-EOF
		server_ips=(${server_ips[@]})
	        for ((i=0; i<${#server_ips[@]}; i++))
	                do
	                setssh \${server_ips[\$i]} postgres $postgres_pass
        		for ((j=0; j<${#server_ips[@]}; j++))
		                do
				tempip="\${server_ips[\$j]}"
				ssh -T postgres@\${server_ips[\$i]} <<-EOF1
					setssh \$tempip postgres $postgres_pass
					EOF1
				done
	                done
		EOF

	setssh $balancer_ip root $root_pass
	ssh -T root@$balancer_ip <<-EOF
		server_ips=(${server_ips[@]})
        	for ((j=0; j<${#server_ips[@]}; j++))
			do
			setssh \${server_ips[\$j]} root $root_pass
			setssh \${server_ips[\$j]} postgres $postgres_pass
			done
		EOF



echo -e "Setting replicaton..."
        for ((j=0; j<${#slave_ips[@]}; j++))
		do
		ssh -T root@${slave_ips[$j]} "service postgresql stop"
		done

	ssh -T root@$master_ip <<-EOF
		server_ips=(${server_ips[@]})
		echo "Setting postgresql.conf"
			echo "#hot_standby = on" >> /var/lib/pgsql/data/postgresql.conf

		echo "Setting pg_hba.conf"
        	for ((j=0; j<${#server_ips[@]}; j++))
			do
			echo "host    replication     postgres        \${server_ips[\$j]}/32           trust" >> /var/lib/pgsql/data/pg_hba.conf
			done

		service postgresql restart
		EOF

	echo "Replication..."
	ssh -T postgres@$master_ip <<-EOF
		slave_ips=(${slave_ips[@]})
		psql -c "SELECT pg_start_backup('stream');"
	        for ((j=0; j<${#slave_ips[@]}; j++))
			do
			rsync -a /var/lib/pgsql/data/ \${slave_ips[\$j]}:/var/lib/pgsql/data/ --exclude postmaster.pid --exclude postmaster.opts
			done
 		psql -c "SELECT pg_stop_backup();"
		EOF

        for ((j=0; j<${#slave_ips[@]}; j++))
		do
		ssh -T postgres@${slave_ips[$j]} <<-EOF
			echo "Setting recovery.conf"
				echo "standby_mode = 'on'
	primary_conninfo = 'host=$master_ip port=5432 user=postgres'
	trigger_file = 'failover'" > /var/lib/pgsql/data/recovery.conf

			echo "Setting postgresql.conf"
				sed -i 's/#hot_standby = on/hot_standby = on/' /var/lib/pgsql/data/postgresql.conf
			EOF
		done

        for ((j=0; j<${#slave_ips[@]}; j++))
		do
		ssh -T root@${slave_ips[$j]} "service postgresql start"
		done

	ssh -T root@$balancer_ip <<-EOF
		echo "Setting pgpool.conf"
			sed -i "s/replication_mode =.*/replication_mode = false/" /etc/pgpool-II/pgpool.conf
			sed -i "s/load_balance_mode =.*/load_balance_mode = true/" /etc/pgpool-II/pgpool.conf

			sed -i "s/recovery_user =.*/recovery_user = 'postgres'/" /etc/pgpool-II/pgpool.conf
			sed -i "s/recovery_password =.*/recovery_password = '$postgres_pass'/" /etc/pgpool-II/pgpool.conf
			sed -i "s/recovery_1st_stage_command =.*/recovery_1st_stage_command = 'basebackup.sh'/" /etc/pgpool-II/pgpool.conf
			sed -i "s/recovery_2nd_stage_command =.*/recovery_2nd_stage_command = ''/" /etc/pgpool-II/pgpool.conf
			sed -i "s/recovery_timeout =.*/recovery_timeout = 90/" /etc/pgpool-II/pgpool.conf

			sed -i "s/master_slave_mode =.*/master_slave_mode = true/" /etc/pgpool-II/pgpool.conf
			sed -i "s/master_slave_sub_mode =.*/master_slave_sub_mode = 'stream'/" /etc/pgpool-II/pgpool.conf
			sed -i "s/failover_command =.*/failover_command = '\/etc\/pgpool-II\/failover.sh %d %H \/var\/lib\/pgsql\/data\/failover'/" /etc/pgpool-II/pgpool.conf

			sed -i "s/health_check_timeout =.*/health_check_timeout = 20/" /etc/pgpool-II/pgpool.conf
			sed -i "s/health_check_period =.*/health_check_period = 15/" /etc/pgpool-II/pgpool.conf
			sed -i "s/health_check_user =.*/health_check_user = 'postgres'/" /etc/pgpool-II/pgpool.conf

		pgpool -m fast stop
		service pgpool start
		EOF

	echo "Setting failover.sh"
		scp $MY_DIR/data/failover.sh root@$balancer_ip:/etc/pgpool-II/

	ssh -T root@$balancer_ip <<-EOF
		server_ips=(${server_ips[@]})
		chmod 755 /etc/pgpool-II/failover.sh

		echo "Loading pgpool-walrecrunning and pgpool-recovery..."
        	for ((j=0; j<${#server_ips[@]}; j++))
			do
			scp /usr/share/pgpool-II/pgpool-walrecrunning.so root@\${server_ips[\$j]}:/usr/lib64/pgsql/
			scp /usr/share/pgpool-II/pgpool-walrecrunning.sql root@\${server_ips[\$j]}:/usr/share/pgsql/
			scp /usr/share/pgpool-II/pgpool-recovery.so root@\${server_ips[\$j]}:/usr/lib64/pgsql/
			scp /usr/share/pgpool-II/pgpool-recovery.sql root@\${server_ips[\$j]}:/usr/share/pgsql/
			done
		EOF

	ssh -T postgres@$master_ip <<-EOF
		psql -f /usr/share/pgsql/pgpool-walrecrunning.sql postgres
		psql -f /usr/share/pgsql/pgpool-recovery.sql template1
		EOF

	echo "Setting basebackup.sh and pgpool_remote_start"
		cp $MY_DIR/data/basebackup.sh $MY_DIR/data/basebackup.sh.temp

		sed -i "s/eth0/$net_adapter/g" $MY_DIR/data/basebackup.sh.temp
        	for ((j=0; j<${#server_ips[@]}; j++))
			do
			scp $MY_DIR/data/basebackup.sh.temp postgres@${server_ips[$j]}:/var/lib/pgsql/data/basebackup.sh
			scp $MY_DIR/data/pgpool_remote_start postgres@${server_ips[$j]}:/var/lib/pgsql/data/

			ssh -T postgres@${server_ips[$j]} <<-EOF
				chmod 755 /var/lib/pgsql/data/basebackup.sh
				chmod 755 /var/lib/pgsql/data/pgpool_remote_start
				EOF
			done
	}


erase() {
  echo -e "Turn off services..."
    ssh -T root@$balancer_ip "pgpool -m fast stop"

    for ((j=0; j<${#server_ips[@]}; j++))
      do
      ssh -T root@${server_ips[$j]} "service postgresql stop"
      done

  echo -e "Settings..."
    for ((j=0; j<${#server_ips[@]}; j++))
      do
      echo -e "\t for ${server_ips[$j]}:"
      echo "Setting postgresql.conf"
        ssh -T root@${server_ips[$j]} "sed -i \"/hot_standby = on/d\" /var/lib/pgsql/data/postgresql.conf"
      echo "Setting pg_hba.conf"
        ssh -T root@${server_ips[$j]} "sed -i \"/host.*replication.*postgres.*32.*trust/d\" /var/lib/pgsql/data/pg_hba.conf"
      echo "Removing recovery.conf"
        ssh -T root@${server_ips[$j]} "rm /var/lib/pgsql/data/recovery.conf" &> /dev/null
      done

      echo -e "\t for $balancer_ip:"
	ssh -T root@$balancer_ip <<-EOF
		echo "Setting pgpool.conf"
			sed -i "s/replication_mode =.*/replication_mode = false/" /etc/pgpool-II/pgpool.conf
			sed -i "s/load_balance_mode =.*/load_balance_mode = false/" /etc/pgpool-II/pgpool.conf

			sed -i "s/recovery_1st_stage_command =.*/recovery_1st_stage_command = ''/" /etc/pgpool-II/pgpool.conf
			sed -i "s/recovery_2nd_stage_command =.*/recovery_2nd_stage_command = ''/" /etc/pgpool-II/pgpool.conf

			sed -i "s/master_slave_mode =.*/master_slave_mode = false/" /etc/pgpool-II/pgpool.conf
			sed -i "s/failover_command =.*/failover_command = ''/" /etc/pgpool-II/pgpool.conf
		EOF

  echo -e "Turn on services..."
    for ((j=0; j<${#server_ips[@]}; j++))
      do
      ssh -T root@${server_ips[$j]} "service postgresql start"
      done

    ssh -T root@$balancer_ip "service pgpool start"
  }


###################################

case $what_todo in
        install)
                echo "Installing $0..."
                if [ "$param1" = "" ]
                then
                        echo -e "Error: Input parameter isn't set!\n"
                        exit 1
                fi
		            master_ip=$param1
                install
                echo
                ;;
        set)
                echo "Setting $0..."
#                set
                echo
                ;;
        unset)
                echo "Unsetting $0..."
                echo
                ;;
        erase)
                echo "Erasing $0..."
                erase
                echo
                ;;
        *)
                echo -e "Usage: $0 { install | set <ip_addr> | unset <ip_addr> | erase }\n"
                exit 1
                ;;
esac

