#!/bin/bash

what_todo=$1
param1=$2
param2=$3

export conf_file="$zarya_etc/standmng.conf"
export local_conf_file="$zarya_etc/standmng_local.conf"

init_conf()
	{
	echo "export feed_files=\"$zarya_etc/standmng.d\"" >> $local_conf_file
	export feed_files="$zarya_etc/standmng.d"

	echo "export nodes_files=\"$feed_files/nodes\"" >> $local_conf_file
	export nodes_files="$feed_files/nodes"

	echo "export nodes_rules=\"$nodes_files/nodes.rules\"" >> $local_conf_file

	echo "export modules_files=\"$feed_files/modules\"" >> $local_conf_file
	export modules_files="$feed_files/modules"

	echo "export patches_files=\"$feed_files/patches\"" >> $local_conf_file
	export patches_files="$feed_files/patches"
	
	echo "export modes_files=\"$feed_files/modes\"" >> $local_conf_file
	export modes_files="$feed_files/modes"

	echo "export standmng_pkg=\"postgresql-test\"" >> $local_conf_file

	echo "export root_pass=\"123456\"" >> $local_conf_file
	echo "export postgres_pass=\"123456\"" >> $local_conf_file
	echo "export user1_pass=\"123456\"" >> $local_conf_file
	echo "export user2_pass=\"123456\"" >> $local_conf_file
	echo "export user3_pass=\"123456\"" >> $local_conf_file
	echo "export sepgsql_pass=\"123456\"" >> $local_conf_file
	echo "export repl_pass=\"123456\"" >> $local_conf_file
	echo "export net_adapter=\"eth0\"" >> $local_conf_file
	}

if [ ! -e $conf_file ]
then
	touch $conf_file
fi
source $conf_file

if [ ! -e $local_conf_file ]
then
	touch $local_conf_file
	init_conf
fi
source $local_conf_file

local_addr=$(ifconfig eth0| sed -n '2 {s/^.*inet addr:\([0-9.]*\) .*/\1/;p}')

set_sshconnect()
	{
	setssh $1 root $root_pass
	}

set_sshconnect_toall()
	{
	for ((i=0; i<${#standnodes[@]}; i++))
		do
		set_sshconnect ${standips[$i]}
		done
	}

update_sshconnection_forall()
	{
	for ((i=0; i<${#standnodes[@]}; i++))
		do
		ssh -T root@${standips[$i]} <<-EOF
			standmng set_ssh
			EOF
		done
	}

# Write changes to config files
# Copy all files except local conf to other machines
update_conf()
	{
	echo "Updating config's files..."

	sed -i "/standnodes/d" $conf_file
	echo "declare -x standnodes=(${standnodes[@]})" >> $conf_file
	sed -i "/standips/d" $conf_file
	echo "declare -x standips=(${standips[@]})" >> $conf_file
	sed -i "/installed_patches/d" $local_conf_file
	echo "declare -x installed_patches=(${installed_patches[@]})" >> $local_conf_file
	sed -i "/curmode/d" $conf_file
	echo "declare -x curmode=$curmode" >> $conf_file
	sed -i "/master_ip/d" $conf_file
	echo "declare -x master_ip=$master_ip" >> $conf_file
#	sed -i "/standmodes/d" $conf_file
#	echo "declare -x standmodes=(${standmodes[@]})" >> $conf_file

	for ((i=0; i < ${#standnodes[@]}; i++))
		do
		if [ "$local_addr" != "${standips[$i]}" ]
		then
			ssh -T ${standips[$i]} <<-EOF
				mkdir -p $zarya_bin
				mkdir -p $feed_files
				
				grep 'zarya_bin' /etc/profile &> /dev/null
				if [ "\$?" = "1" ]
				then
					echo "export zarya_bin=$zarya_bin" >> /etc/profile
					echo "export zarya_etc=$zarya_etc" >> /etc/profile
					echo "export PATH=\"$PATH:$zarya_bin\" " >> /etc/profile
				fi
				EOF
			scp -rq $zarya_bin/standmng ${standips[$i]}:$zarya_bin/
			scp -rq $conf_file ${standips[$i]}:$conf_file
			scp -rq $feed_files/* ${standips[$i]}:$feed_files/
		fi
		done
	}

get_index()
	{
	if [ "$1" = "" ]
	then
		echo "Error: Input parameter isn't set!"
		exit 1
	fi
	value=$1

	for ((i=0; i<${#standnodes[@]}; i++))
		do
		if [[ "$value" = "${standnodes[$i]}" || "$value" = "${standips[$i]}" ]]
		then
			gotindex=$i
			return
		fi
		done

	echo "Error: Can't find \"$value\""
	exit 1
	}


del()
	{
	echo "Deleting $1 from stand..."
	if [ "$1" = "" ]
	then
		echo "Error: Input parameter isn't set!"
		exit 1
	fi
	value=$1
	
	get_index $value

	for ((i=$gotindex; i<${#standnodes[@]}; i++))
		do
		standnodes[$i]=${standnodes[$i+1]}
		standips[$i]=${standips[$i+1]}
		done
	unset standnodes[$i-1]
	unset standips[$i-1]
	}

stand_list()
	{
	echo -e "\nList of machines in current stand configuration:"
	echo -e "\t<Node>\t\t<IP address>\t<Mode>"
	local tabs="\t\t"
	local temp_mode="none"
	for ((i=0; i<${#standnodes[@]}; i++))
		do
		case $curmode in
			master_slave)
				if [ "${standips[$i]}" = "$master_ip" ]
				then
					temp_mode="Master"
				elif [ "${standnodes[$i]}" = "Server" ]
				then
					temp_mode="Slave"
				else
					temp_mode="none"
				fi
				;;
			multimaster)
				if [ "${standnodes[$i]}" = "Server" ]
				then
					temp_mode="Master"
				else
					temp_mode="none"
				fi
				;;
			*)
				temp_mode="none"
				;;
		esac
		if [[ ${#standnodes[$i]} > 7 ]]
		then
			tabs="\t"
		else
			tabs="\t\t"
		fi
		echo -e "\t${standnodes[$i]}$tabs${standips[$i]}\t$temp_mode"
		done
	if [ "$curmode" != "" ]
	then
		echo -e "Current mode of stand is \"$curmode\""
	else
		echo -e "Current mode of stand is \"none\""
	fi
	echo 
	}

find()
	{
	if [ "$1" = "" ]
	then
		echo "Error: Input parameter isn't set!"
		exit 1
	fi
	what_to_find=$1


	for ((i=0; i<${#standnodes[@]}; i++))
		do
		if [[ "$what_to_find" = "${standnodes[$i]}" || "$what_to_find" = "${standips[$i]}" ]]
		then
			return 1
		fi
		done

	return 0
	}

add()
	{
	echo "Adding $1 to stand..."

	if [ "$1" = "" ]
	then
		echo "Error: Input parameter isn't set!"
		exit 1
	fi

	if [ "$2" = "" ]
	then
		echo "Error: Input parameter isn't set!"
		exit 1
	fi
	node=$param1
	ip=$param2

	find $ip
	if [ "$?" = "1" ]
	then
		echo "Error: The machine with such IP address is already exist!"
		exit 1
	fi

	standnodes[${#standnodes[@]}]=$node
	standips[${#standips[@]}]=$ip
	}

CheckAlive_byPing()
	{
	if [ "$1" = "" ]
	then
		echo "Error: Input parameter isn't set!"
		exit 1
	fi
	ip=$1

	ping -c 2 $ip &> /dev/null

	return $?
	}

CheckStandAlive()
	{
	retval=0
	for ((i=0; i<${#standnodes[@]}; i++))
		do
		printf "Checking ${standips[$i]}'s machine...\t"
		CheckAlive_byPing ${standips[$i]}
		if [ "$?" = "0" ]
		then
			printf "alive\n"
		else
			printf "down\n"
			retval=1
		fi
		done

	return $retval
	}

# return ip of node
# or return node of ip
get()
        {
        if [ "$1" = "" ]
        then
                echo "Error: Input parameter isn't set!"
                exit 1
        fi
        what_to_find=$1

        if [ "$what_to_find" = "allip" ]
        then
                echo "${standips[@]}"   
        else
                local first="true"
                for ((i=0; i<${#standnodes[@]}; i++))
                        do
                        if [[ "$what_to_find" = "${standnodes[$i]}" ]]
                        then
                                if [[ "$first" = "false" ]]
                                then
                                        printf " "
                                fi

                                printf "${standips[$i]}"

                                first="false"
                        fi

                        if [[ "$what_to_find" = "${standips[$i]}" ]]
                        then
                                echo "${standnodes[$i]}"
                                return 1
                        fi
                        done
        fi

        return 0
        }

new_patches()
	{
	for j in $(ls $patches_files)
		do
		if [[ "$j" = "data" || "$j" = "feed" ]]
		then
			continue
		fi

		result=1
        	for ((i=0; i<${#installed_patches[@]}; i++))
                	do
			if [ "${installed_patches[$i]}" = "$j" ]
			then
				result=0
				break
			fi
			done
		if [ "$result" = "1" ]
		then
			return 1
		fi
		done
	return 0
	}

install_newpatches()
	{
	new_patches
	if [ "$?" != "0" ]
	then
		echo -e "\nThere are some patches which need to install"
		echo -e "Installing patches..."
		CheckStandAlive
		
		for j in $(ls $patches_files)
			do
			if [[ "$j" = "data" || "$j" = "feed" ]]
			then
				continue
			fi

			result=1
	        	for ((i=0; i<${#installed_patches[@]}; i++))
	                	do
				if [ "${installed_patches[$i]}" = "$j" ]
				then
					result=0
					break
				fi
				done
			if [ "$result" = "1" ]
			then
				echo -e "\t Installing patch \"$j\"..."
				chmod +x $patches_files/*
				$patches_files/$j
				installed_patches[${#installed_patches[@]}]="$j"
			fi
			done
		update_conf
	fi
	echo -e "All patches are installed\n"
	}

update_ModesList()
	{
	ModesList=(`ls $modes_files/*.mode`)
	
        for ((i=0; i<${#ModesList[@]}; i++))
                do
		local temp="${ModesList[$i]}"
		temp=${temp:${#modes_files}+1}
		ModesList[$i]=${temp/%.mode/}
		done
	}

# check if this mode is exist
# and check if this mode isn't installed yet
CheckMode()
	{
        if [ "$1" = "" ]
        then
                echo "Error: Input parameter isn't set!"
                exit 1
        fi
        what_to_find=$1

	if [ "$what_to_find" = "$curmode" ]
	then
		return 2 
	fi

        for ((i=0; i<${#ModesList[@]}; i++))
                do
		if [ "${ModesList[$i]}" = "$what_to_find" ]
		then
			return 1
		fi
		done

	return 0
	}

ask_master_ip()
        {
        printf "Input IP of future Master: "
        read master_ip

        server_ips=(`standmng get Server`)
        for ((i=0; i<${#server_ips[@]}; i++))
                do
                if [ "$master_ip" = "${server_ips[$i]}" ]
                then
			update_conf
                        return 0
                fi
                done

        return 1
        }

set_mode()
	{
	mode=$1

	if [ "$curmode" != "" ]
	then
		$modes_files/$curmode.mode erase
	fi

	case $mode in
		master_slave)
			ask_master_ip
			if [ "$?" = "1" ]
			then
				echo "Error: Can't find Server with such IP: \"$master_ip\""
				standmng list
				exit 1
			fi
			
			$modes_files/$mode.mode install $master_ip 
			
			;;
		*)
			$modes_files/$mode.mode install
			;;
	esac

	curmode=$mode
	}

modes_list()
	{
	echo -e "\nList of modes:"
	update_ModesList

        for ((i=0; i<${#ModesList[@]}; i++))
                do
		if [ "${ModesList[$i]}" = "$curmode" ]
		then
			echo -e "\t${ModesList[$i]}\tis set"
		else
			echo -e "\t${ModesList[$i]}"
		fi
		done
	echo
	}

case $what_todo in
	add)
		if [ "$param1" = "" ]
		then
			echo "Error: Input parameter isn't set!"
			exit 1
		fi
	
		if [ "$param2" = "" ]
		then
			echo "Error: Input parameter isn't set!"
			exit 1
		fi
		node=$param1
		ip=$param2

		install_newpatches

		$nodes_rules check $node
		if [ "$?" = "0" ]
		then
			echo "Error: Can't find this node \"$node\""
			$nodes_rules list
			exit 1
		fi

		add $node $ip

		CheckStandAlive
		if [ "$?" = "1" ]
		then
			echo "Error: The stand isn't alive fully"
			standmng del $ip
			exit 1 
		fi

		set_sshconnect_toall

#		echo -e "\n $standmng_pkg is installing..."
#		ssh -T root@$ip "yum -y -q install $standmng_pkg"
#		if [ "$?" = "1" ]
#		then
#			echo "Error: Can't install $standmng_pkg. May be you need set repo at first"
#			standmng del $ip
#			exit 1 
#		fi

		update_conf
		
		update_sshconnection_forall

		$nodes_rules install $ip
                if [ "$?" != "0" ]
                then
                        echo "Error: During execution $nodes_rules"
                        exit 1
                fi
	
		echo "The new machine has been added"
		stand_list
		;;

        del)
                if [ "$param1" = "" ]
                then
                        echo "Error: Input parameter isn't set!"
                        exit 1
                fi
		ip=$param1

                CheckStandAlive
                if [ "$?" = "1" ]
                then
                        echo "Error: The stand isn't alive fully"
                        exit 1
                fi

                find $ip
                if [ "$?" = "0" ]
                then
                        echo "Error: Can't find this machine!"
                        exit 1
                fi

		get_index $ip
		node=${standnodes[$gotindex]}

                ssh -T root@$ip <<-EOF
                        $nodes_rules erase $ip
			EOF
                if [ "$?" != "0" ]
                then
                        echo "Error: During execution $nodes_rules"
                        exit 1
                fi

                del $ip
                update_conf

                echo "The machine has been deleted"
                stand_list
                ;;

	list)
		stand_list
		;;

	nodes)
		$nodes_rules list
		;;

	alive)
		CheckStandAlive
		;;

	patches)
		case $param1 in
			install)
				update_conf

			        for ((i=0; i<${#standnodes[@]}; i++))
			                do
					ssh -T root@${standips[$i]} <<-EOF
						standmng install_newpatches
						EOF
					done
				;;
			*)
				echo "Usage: $0 $what_todo { install }"
				exit 1
				;;
		esac
		;;

	modes)
		case $param1 in
			set)
		                if [ "$param2" = "" ]
		                then
		                        echo "Error: Input parameter isn't set!"
		                        exit 1
		                fi
				mode=$param2

				update_ModesList

				CheckMode $mode
				result=$?
				if [ "$result" = "2" ]
				then
					echo "Error: This mode is already set \"$mode\""
					standmng modes list
					exit 1
				fi
				if [ "$result" = "0" ]
				then
					echo "Error: Can't find this mode \"$mode\""
					standmng modes list
					exit 1
				fi
		
				CheckStandAlive
				if [ "$?" = "1" ]
				then
					echo "Error: The stand isn't alive fully"
					exit 1 
				fi

				set_mode $mode

				update_conf

                		echo "The mode has been set"
		                stand_list
				;;
			list)
				modes_list
				;;
			*)
				echo "Usage: $0 $what_todo { set <mode_name> | list }"
				exit 1
				;;
		esac
		;;
	#set ssh connection to every machines of the stand without password
	set_ssh)
		set_sshconnect_toall
		;;
	#get ip or node name which is according to param1
	#if param1 == "allip" output all ips of the stand 
	get)
		get $param1
		;;
	#install new patches	
	install_newpatches)
		install_newpatches		
		;;

	help | --help | h | -h)
		echo -e "
standmng --stand manager
\tlist\t--list of machines in current stand configuration
\tadd <node_name> <ip_addr>\t--add a new machine to stand
\tdel <ip_addr>\t--del the machine from stand by its <ip_addr>
\tnodes\t--list of availiable nodes
\talive\t--check alive of the stand's machine
\tpatches\t
\t\tinstall\t--install new patches
\tmodes\t
\t\tset <mode_name>\t--set mode
\t\tlist\t--list of availiable modes
"
		;;
	*)
		echo "Usage: $0 { list | add <node_name> <ip_addr> | del <ip_addr> | nodes | alive | patches { install } | modes { set <mode_name> | list }"
		exit 1
		;;
esac



